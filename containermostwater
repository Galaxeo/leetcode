"""
One might think of doing something like this from the beginning:

max = 0
for i in range(len(height)):
    for j in range(i, len(height)):
        if  min(height[i], height[j]) * (j-i) > max:
            max = min(height[i], height[j]) * (j-i)
return max

Obviously the time complexity here is terrible (O(n^2)), so trying to make this into O(n) requires us to think of a different maneuver.

Our goal here is to only have to look through each height once.

If we think about the containers being made, one of the sides are going to be the restricting factor of the container's area.
For example, in an input [1,8,6,2,5,4,8,3,7], starting with 1 and 7 on both sides, obviously 1 is the restricting factor.
Thus, we want to increment the left side and then have our left border of the container be a height of 8. Now, 7 is the restricting
factor and we can increment the right side. We do this over and over until we find the largest container.

This way, our time complexity remains O(n), because we only have to look through each height once.
"""
class Solution:
    def maxArea(self, height: List[int]) -> int:
        i = 0
        j = len(height)-1 
        area = 0
        while i < j:
            area = max(min(height[i], height[j]) * (j-i), area)
            if height[i] > height[j]:
                j -= 1
            else:
                i += 1
        return area